import React, {Component} from 'react';import axios from "axios";export default class Create extends Component {    constructor() {        super();        this.handleInputChange = this.handleInputChange.bind(this);        this.onSubmit = this.onSubmit.bind(this);        this.state = {            name: '',            email: '',            password: '',            confirmation: '',            errors: {},        }    }    /**     *  add information about new user to state     *     * @param event     */    handleInputChange(event) {        const target = event.target;        this.setState({            [target.name]: target.value        });    }    /**     *  Submit new user to back-end and receive result     *     * @param event     */    onSubmit(event) {        event.preventDefault();        this.setState({errors: {}});        axios.post('http://megakit/api/save/user', this.state)            .then(response => {                if (response.data.success) {                    this.props.history.push("/users", response.data.success);                }                // console.log(response.data.warning);            }).catch(error => {            this.setState({                errors: error.response.data.errors            });        })    }    render() {        return (            <div className="row justify-content-center">                <div className="col-md-6 col-sm-8">                    <form onSubmit={this.onSubmit}>                        <div className="form-group">                            <label htmlFor="userName">User name</label>                            <input type="text" id="userName" name="name" className={(this.state.errors.name) ?                                "form-control is-invalid" : 'form-control'} required onChange={this.handleInputChange}                                   value={this.state.name} placeholder="Ivan"/>                            <div className="text-danger">{(this.state.errors.name) ?                                this.state.errors.name.filter((name) => name) : ''}</div>                        </div>                        <div className="form-group">                            <label htmlFor="userEmail">Email</label>                            <input type="email" id="userEmail" name="email" className={(this.state.errors.email) ?                                "form-control is-invalid" : 'form-control'} onChange={this.handleInputChange}                                   placeholder="megakit@gmail.com" value={this.state.email} required/>                            <div className="text-danger">{(this.state.errors.email) ?                                this.state.errors.email.filter((email) => email) : ''}</div>                        </div>                        <div className="form-group">                            <label htmlFor="userPassword">Password</label>                            <input type="password" className={(this.state.errors.password) ?                                "form-control is-invalid" : 'form-control'} id="userPassword" name="password"                                   onChange={this.handleInputChange} value={this.state.password} required/>                            <div className="text-danger">{(this.state.errors.password) ?                                this.state.errors.password.filter((password) => password) : ''}</div>                        </div>                        <div className="form-group">                            <label htmlFor="userConfirmation">Confirm password</label>                            <input type="password" className={(this.state.errors.confirmation) ?                                "form-control is-invalid" : 'form-control'} id="userConfirmation" name="confirmation"                                   onChange={this.handleInputChange} value={this.state.confirmation} required/>                            <div className="text-danger">{(this.state.errors.confirmation) ?                                this.state.errors.confirmation.filter((confirmation) => confirmation) : ''}</div>                        </div>                        <button type="submit" className="btn btn-outline-secondary float-right">                            Create User <i className="fas fa-plus-square"/>                        </button>                    </form>                </div>            </div>        );    }}