import React, {Component} from 'react';import axios from 'axios';import Pagination from "react-js-pagination";import {Link} from 'react-router-dom';import Success from "../../messages/success";export default class Listing extends Component {    constructor(props) {        super(props);        this.handlePageChange = this.handlePageChange.bind(this);        this.state = {            users: [],            activePage: 1,            itemsCountPerPage: [],            totalItemsCount: 1,            pageRangeDisplayed: 5,            alert_message: '',        };    }    /**     * Get Users from db with pagination     */    componentDidMount() {        axios.get('http://megakit/api/users')            .then(response => {                this.setState({                    activePage: response.data.current_page,                    itemsCountPerPage: response.data.per_page,                    totalItemsCount: response.data.total,                    users: response.data.data,                });            });        if (this.props.history.location.state) {            this.setState({                alert_message: this.props.history.location.state            });            this.props.history.push("/users");        }    }    /**     * Pagination, get user from db     *     * @param pageNumber     */    handlePageChange(pageNumber) {        axios.get('http://megakit/api/users?page=' + pageNumber)            .then(response => {                this.setState({                    activePage: response.data.current_page,                    itemsCountPerPage: response.data.per_page,                    totalItemsCount: response.data.total,                    users: response.data.data,                });            })    }    /**     * Delete user from db     *     * @param user_id     */    deleteUser(user_id) {        axios.delete('http://megakit/api/users/' + user_id)            .then(response => {                if (response.data.success) {                    const users = this.state.users;                    for (let i = 0; i < users.length; i++) {                        if (users[i].id === user_id) {                            users.splice(i, 1);                            this.setState({                                users: users,                                alert_message: response.data.success                            })                        }                    }                }            });        this.setState({alert_message: ''})    }    render() {        return (            <div>                {(this.state.alert_message.length > 0) ? <Success message={this.state.alert_message}/> : null}                <table className="table table-bordered text-center">                    <thead className="thead-dark">                    <tr>                        <th scope="col">#</th>                        <th scope="col">Name</th>                        <th scope="col">Email</th>                        <th scope="col">User Cars</th>                        <th scope="col">Control</th>                    </tr>                    </thead>                    <tbody>                    {                        this.state.users.map(user => {                            return (                                <tr key={user.id}>                                    <th scope="row">{user.id}</th>                                    <td>{user.name}</td>                                    <td>{user.email}</td>                                    <td>                                        {(user.cars.length > 0) ? (                                            <select>                                                {user.cars.map((car => {                                                    return (<option key={car.id}>{car.make + ' ' + car.model}</option>);                                                }))}                                            </select>                                        ) : <b className="text-danger">user haven't cars</b>}                                    </td>                                    <td>                                        <Link className="btn btn-outline-info btn-sm" to={`/users/read/${user.id}`}>                                            <i className="far fa-eye fa-2x"/>                                        </Link>                                        <Link className="btn btn-outline-secondary btn-sm"                                              to={`/users/edit/${user.id}`}>                                            <i className="fas fa-edit fa-2x"/>                                        </Link>                                        <a href="#" onClick={this.deleteUser.bind(this, user.id)}                                           className="btn btn btn-outline-danger btn-sm">                                            <i className="fas fa-trash-alt fa-2x"/>                                        </a>                                    </td>                                </tr>                            )                        })                    }                    </tbody>                </table>                <div className="d-flex justify-content-center">                    <Pagination                        activePage={this.state.activePage}                        itemsCountPerPage={this.state.itemsCountPerPage}                        totalItemsCount={this.state.totalItemsCount}                        pageRangeDisplayed={this.state.pageRangeDisplayed}                        onChange={this.handlePageChange}                        itemClass="page-item"                        linkClass="page-link"                    />                </div>            </div>        );    }}